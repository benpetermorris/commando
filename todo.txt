
NEW

- Failure points
    - startup: "an extension failed to initialize properly"
    - on command generation: ..

- Handle RequiresConfigurationException from Factories, etc.
    - unlike commands in that a factory shouldn't force a configuration event; how to notify in UI?
    - possibly need some sort of "these need configuring" alert

- Implement logic for UsesConfiguratorAttribute - important, otherwise (for example) the google contact
  reader will only read on startup AFTER credentials have been previously entered

- Asynchronous factories. Until timeout, allow a factory to present new parse results. Look at RX for 
  possible publish mechanisms. Subclass of Factory could be a publisher, as could the existing 
  CommandGeneratorResult class.

  >> Why not make all factories asynchronous?

- Alias factories

- Commandline tokens

    - factoryalias/term
    - : [rest is text]          
    - "term [search history for term]

ETC

- Disposable Facets

- Array parameters

- Facet converters. Should be able to take in one or more facets and return one or more other facets.

* Pass expected facet types to factories
    - if we've filtered commands, then a factory that produces multiple facet types should only try
      to produce facets of the types that the filtered commands can accept

- Transient facets (i.e. no stats) e.g. for date/times: no point in keeping stats on these, so should 
  be able to mark the facet type (interface?) as transient. How does this affect the db, though, considering
  we still need to store the associated moniker with the command...

- Exclusionary parse results
    - A factory can produce exclusionary results, which state definitively that the parsed text is a
      a certain facet. These will be checked first, and any matching text removed from further consideration.
      Especially useful in combination with database parses, since fewer terms will need to be checked
      against indexed items.

* Where an optional parameter is satisfied by suggestions but not a ParseResult, ensure "Unspecified"
  is one of the suggestions. [Note: make this a UI feature.]

- If useful, add property to CommandArgument to indicate where it came from
    - DB (History)
    - DB (Facet Index)
    - FacetFactory
    - etc

- Consider: in the case of (for example) a url factory that looks for patterns like http://etcetc.com,
  but in which the relevant part of the text is a subset of that matched pattern ("etcetc.com"), it would
  be ideal to indicate that this is the text by which future matches should be made when parsing from
  the db history information. e.g., if I typed in simply "etcetc.com", or "etcetc", a match should be 
  made. 

  Currently can't just specify that range in the ParseResult, because the other text (http://) would be
  seen not to have been parsed, which would screw up the argument list creation. Could add a "relevant
  range" to the ParseResult, and store / search on that...

- Command return values. Should be able to throw one of a set of exceptions that cause further interaction
  in the main UI. 
  
- Result lists
    - Of FacetMonikers
    - Common UI to present the list
    - Specify a format string for simple presentation
    - esp. useful for 'find' commands

Scripted Factories / Commands

- Use a .NET JS library to allow creation of scriptable factories. For e.g., 

    function createEasynewsUrl(string input) {
        return CommandoFactory.CreateMoniker('UrlFacet', 
            'http://easynews.com/search?' + encodeURIComponent(input), ...);
    }

    revisted: many difficulties in scripted factories. Most (?) usages could be implemented by
    scripted Commands. e.g.:

    function openEasyNews(string input) {
        return CommandoFactory.CreateMoniker('UrlFacet', 
            'http://easynews.com/search?' + encodeURIComponent(input), ...);
    }

Stats

- All else being equal, give higher weighting to suggested monikers from factories whose monikers
  are most used. This should be considered in general, and even moreso relative to the generated
  command. e.g. if "send attachment" is most often invoked with monikers generated by the "recent files"
  factory, then any suggestions from that factory should take higher precedence over equally-relevant
  suggestions from less-associated factories.

- Optimization: FacetMoniker usage stats table
    - Last usage
    - Total usage count
    - Usage count over last hour, day, three days, week, month, three months
    - Update stats every n minutes
    - No rows for zero usages

Extensibility

- Scenario: a plugin that exposes ideal locations to search for information. For example, one that adds
  all browser download folders to a central store, that is then queried by the FileSystemItemFactory
  to allow users to type in non-absolute paths.

* Configurations: extensions should hold a UserControl that edits configuration information. Storage
  of the info is handled by the engine... a property bag?
  
Usability

- Self-documenting extensions. Should be able to document, for example, that the FirefoxLocationsFactory
  understands a string like "firefox downloads" -- and the user should be able to browse this information. 
  In an attribute? A resource XML format? 

- Icons. CommandAttribute should be able to specify an Icon resource OR that the icon should be retrieved
  from one of its facet parameters. If no such info specified, just show icons from each of the facet 
  parameters?

- UI modules. Should be able to edit one or more facets, then output new instances of the edited facets,
  or different facets. Similar to a converter, I guess, except with a UI. 
  
    - Would come between a CommandExecutor and the Command itself.
    - If multiple were eligible, the user could choose from a quick list.
    - If multiple are eligible for distinct facets in the argument list, these could be presented in a 
      paged wizard, or a tab control.

- Currently, a command is not presented as an option for execution if any of its nonoptional parameters
  are unspecified. This prevents a possible usage scenario: type ">alias", for a specific command, and 
  be taken directly to the "edit command" screen when Enter is pressed, to fill in any missing parameters
  pre-execution. 

  Now that we have the command editor, could adjust the CommandGenerator to provide half-filled commands 
  as an option. Do we want this only if an alias is specified? If not, then should at least place these
  at the bottom of the suggested list...

* Ability to assign an alias to a command as it's being run / selected. 

    - To the command itself, or a combination of the command and any of its parameters. e.g. if 
      command "foo" has parameters A, B and C, I should be able to assign "fooac" to mean "foo with 
      A = blah, C = toot", and B to be filled in from the command text. Cool!

- Ability to search indexed information. 



- 



List of Commands

- Create appointment in calendaring system [ICalendarFacet, IContactFacet, IDateTimeFacet*]
- Tweet / Search Twitter
- Set Facebook Status
- Open calendaring system website 
- Search for files/folders
- System commands?




RELEASE 1

- Assign new aliases to commands
- 